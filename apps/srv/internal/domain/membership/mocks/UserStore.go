// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/arthurdotwork/bastion/internal/domain/membership"
	mock "github.com/stretchr/testify/mock"
)

// NewUserStore creates a new instance of UserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStore {
	mock := &UserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserStore is an autogenerated mock type for the UserStore type
type UserStore struct {
	mock.Mock
}

type UserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *UserStore) EXPECT() *UserStore_Expecter {
	return &UserStore_Expecter{mock: &_m.Mock}
}

// Atomic provides a mock function for the type UserStore
func (_mock *UserStore) Atomic(ctx context.Context, fn func(ctx context.Context, userStore membership.UserStore) error) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Atomic")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(ctx context.Context, userStore membership.UserStore) error) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserStore_Atomic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Atomic'
type UserStore_Atomic_Call struct {
	*mock.Call
}

// Atomic is a helper method to define mock.On call
//   - ctx
//   - fn
func (_e *UserStore_Expecter) Atomic(ctx interface{}, fn interface{}) *UserStore_Atomic_Call {
	return &UserStore_Atomic_Call{Call: _e.mock.On("Atomic", ctx, fn)}
}

func (_c *UserStore_Atomic_Call) Run(run func(ctx context.Context, fn func(ctx context.Context, userStore membership.UserStore) error)) *UserStore_Atomic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(ctx context.Context, userStore membership.UserStore) error))
	})
	return _c
}

func (_c *UserStore_Atomic_Call) Return(err error) *UserStore_Atomic_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserStore_Atomic_Call) RunAndReturn(run func(ctx context.Context, fn func(ctx context.Context, userStore membership.UserStore) error) error) *UserStore_Atomic_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type UserStore
func (_mock *UserStore) CreateUser(ctx context.Context, user membership.User) (membership.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 membership.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, membership.User) (membership.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, membership.User) membership.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Get(0).(membership.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, membership.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserStore_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserStore_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *UserStore_Expecter) CreateUser(ctx interface{}, user interface{}) *UserStore_CreateUser_Call {
	return &UserStore_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserStore_CreateUser_Call) Run(run func(ctx context.Context, user membership.User)) *UserStore_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(membership.User))
	})
	return _c
}

func (_c *UserStore_CreateUser_Call) Return(user1 membership.User, err error) *UserStore_CreateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserStore_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user membership.User) (membership.User, error)) *UserStore_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type UserStore
func (_mock *UserStore) GetUserByEmail(ctx context.Context, email string) (membership.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 membership.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (membership.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) membership.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(membership.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserStore_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserStore_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *UserStore_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *UserStore_GetUserByEmail_Call {
	return &UserStore_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *UserStore_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *UserStore_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserStore_GetUserByEmail_Call) Return(user membership.User, err error) *UserStore_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *UserStore_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (membership.User, error)) *UserStore_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}
