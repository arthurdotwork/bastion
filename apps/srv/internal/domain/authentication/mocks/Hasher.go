// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewHasher creates a new instance of Hasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Hasher {
	mock := &Hasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Hasher is an autogenerated mock type for the Hasher type
type Hasher struct {
	mock.Mock
}

type Hasher_Expecter struct {
	mock *mock.Mock
}

func (_m *Hasher) EXPECT() *Hasher_Expecter {
	return &Hasher_Expecter{mock: &_m.Mock}
}

// Verify provides a mock function for the type Hasher
func (_mock *Hasher) Verify(ctx context.Context, password string, hash string) error {
	ret := _mock.Called(ctx, password, hash)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, password, hash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Hasher_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type Hasher_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx
//   - password
//   - hash
func (_e *Hasher_Expecter) Verify(ctx interface{}, password interface{}, hash interface{}) *Hasher_Verify_Call {
	return &Hasher_Verify_Call{Call: _e.mock.On("Verify", ctx, password, hash)}
}

func (_c *Hasher_Verify_Call) Run(run func(ctx context.Context, password string, hash string)) *Hasher_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Hasher_Verify_Call) Return(err error) *Hasher_Verify_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Hasher_Verify_Call) RunAndReturn(run func(ctx context.Context, password string, hash string) error) *Hasher_Verify_Call {
	_c.Call.Return(run)
	return _c
}
