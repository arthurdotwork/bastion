// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/arthurdotwork/bastion/internal/domain/authentication"
	mock "github.com/stretchr/testify/mock"
)

// NewTokenProvider creates a new instance of TokenProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenProvider {
	mock := &TokenProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TokenProvider is an autogenerated mock type for the TokenProvider type
type TokenProvider struct {
	mock.Mock
}

type TokenProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenProvider) EXPECT() *TokenProvider_Expecter {
	return &TokenProvider_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type TokenProvider
func (_mock *TokenProvider) Generate(ctx context.Context, user authentication.User) (authentication.AccessToken, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 authentication.AccessToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authentication.User) (authentication.AccessToken, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authentication.User) authentication.AccessToken); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Get(0).(authentication.AccessToken)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authentication.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TokenProvider_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type TokenProvider_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *TokenProvider_Expecter) Generate(ctx interface{}, user interface{}) *TokenProvider_Generate_Call {
	return &TokenProvider_Generate_Call{Call: _e.mock.On("Generate", ctx, user)}
}

func (_c *TokenProvider_Generate_Call) Run(run func(ctx context.Context, user authentication.User)) *TokenProvider_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authentication.User))
	})
	return _c
}

func (_c *TokenProvider_Generate_Call) Return(accessToken authentication.AccessToken, err error) *TokenProvider_Generate_Call {
	_c.Call.Return(accessToken, err)
	return _c
}

func (_c *TokenProvider_Generate_Call) RunAndReturn(run func(ctx context.Context, user authentication.User) (authentication.AccessToken, error)) *TokenProvider_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function for the type TokenProvider
func (_mock *TokenProvider) Verify(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TokenProvider_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type TokenProvider_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *TokenProvider_Expecter) Verify(ctx interface{}, token interface{}) *TokenProvider_Verify_Call {
	return &TokenProvider_Verify_Call{Call: _e.mock.On("Verify", ctx, token)}
}

func (_c *TokenProvider_Verify_Call) Run(run func(ctx context.Context, token string)) *TokenProvider_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TokenProvider_Verify_Call) Return(err error) *TokenProvider_Verify_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TokenProvider_Verify_Call) RunAndReturn(run func(ctx context.Context, token string) error) *TokenProvider_Verify_Call {
	_c.Call.Return(run)
	return _c
}
